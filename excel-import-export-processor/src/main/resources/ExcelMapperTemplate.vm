package $wrapper.aPackage;
#if(!$config.useFQNs)
import $config.fullCurrentClassName;
import $config.abstractExcelMapperFullClassName;
import $config.rowFullClassName;
import $config.sheetFullClassName;
#if($wrapper.formatters.size() > 0)
import io.github.belmomusta.exporter.api.formatter.Formatter;
#foreach($formatter_ in $wrapper.formatters)
import ${formatter_.fullFQN};
#end
#set($formatterInterface="Formatter")
#end
#else
    #set($formatterInterface="io.github.belmomusta.exporter.api.formatter.Formatter")
#end

public class ${wrapper.simplifiedClassName}ExcelExporter extends $config.abstractExcelMapperClassName<$config.currentClassName> {
#foreach($formatter_ in $wrapper.formatters)
#if(!$config.useFQNs)
#set($formatterClassName=${formatter_.simpleName})
#else
#set($formatterClassName=${formatter_.fullFQN})
#end
    final $formatterInterface $formatter_.instanceName = new ${formatterClassName}();
#end
#if($wrapper.withHeaders)

    @Override
    protected void writeHeaders($config.sheetClassName sheet) {
        final $config.rowClassName header = sheet.createRow(0);
#foreach($header in $wrapper.correspondanceFieldMethod)
#if($header.ordered)
        addCellWithValue(header, $header.order, "${header.name}");
#else
        addCellWithValue(header, "${header.name}");
#end
#end
    }
#end

    @Override
    protected void createRows($config.sheetClassName sheet, $config.currentClassName object) {
        final $config.rowClassName aRow = sheet.createRow(sheet.getLastRowNum() + 1);
#foreach($pair in $wrapper.correspondanceFieldMethod)
#if($pair.formatter)
    #set( $formatter = ", ${pair.formatter.instanceName}" )
#else
    #set( $formatter = "" )
#end
#if($pair.ordered)
        addCellWithValue(aRow, $pair.order, valueOf(object.${pair.method}()${formatter}));
#else
        addCellWithValue(aRow, valueOf(object.${pair.method}()${formatter}));
#end
#end
    }

    @Override
    public Class<? extends ${config.currentClassName}> getClassClass() {
        return ${config.currentClassName}.class;
    }
}
