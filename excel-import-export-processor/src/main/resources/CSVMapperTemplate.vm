package $wrapper.aPackage;
#if(!$config.useFQNs)
import $config.abstractCSVExporterFullClassName;
import $config.arrayListFullClassName;
import $config.collectionFullClassName;
import $wrapper.className;
#if($wrapper.formatters.size() > 0)
import io.github.belmomusta.exporter.api.formatter.Formatter;
#foreach($formatter_ in $wrapper.formatters)
import ${formatter_.fullFQN};
#end
#set($formatterInterface="Formatter")
#end

#else
    #set($formatterInterface="io.github.belmomusta.exporter.api.formatter.Formatter")

#end
public class ${wrapper.simplifiedClassName}CSVExporter extends ${config.abstractCSVExporterClassName}<$config.currentClassName> {
#foreach($formatter_ in $wrapper.formatters)
#if(!$config.useFQNs)
#set($formatterClassName=${formatter_.simpleName})
#else
#set($formatterClassName=${formatter_.fullFQN})
#end
    final $formatterInterface $formatter_.instanceName = new ${formatterClassName}();
#end

    @Override
    protected ${config.collectionClassName}<$config.stringClassName> getEntries(${config.currentClassName} object) {
        final ${config.collectionClassName}<$config.stringClassName> cells = new ${config.arrayListClassName}<>();
#foreach($pair in $wrapper.correspondanceFieldMethod)
    #if($pair.formatter)
        #set( $formatter = ", ${pair.formatter.instanceName}" )
    #else
        #set( $formatter = "" )
    #end
        cells.add(valueOf(object.${pair.method}()${formatter}));
#end
        return cells;
   }
#if($wrapper.withHeaders)

    @Override
    protected ${config.collectionClassName}<$config.stringClassName> getHeaderEntries() {
        final ${config.collectionClassName}<$config.stringClassName> headers = new ${config.arrayListClassName}<>();
#foreach($header in $wrapper.correspondanceFieldMethod)
        headers.add("${header.name}");
#end
        return headers;
    }
#end

    @Override
    public Class<? extends ${config.currentClassName}> getClassClass() {
        return ${config.currentClassName}.class;
    }
}